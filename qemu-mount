#!/bin/sh
#
# mount qemu image file into a directory
#

prog=`basename $0`

# use sudo for unprivileged users
SUDO=
[ "$(id -u)" -ne 0 ] && SUDO=sudo

# print error message
error() {
	echo $prog: "$@" 2>&1
	exit 1
}

# print usage
usage() {
	if [ $# -ge 1 ]; then
		[ -n "$*" ] && echo $prog: "$@" 2>&1
		echo 2>&1
	fi
	cat << EOF >&2
Mount the qemu image file into a directory.

Usage: $prog [OPTIONS] qemu_image mount_point

Options:
  -p partition_number      select, which partition to mount, default #1
  -r                       mount read-only
  -t fstype                set filesystem type
  -u                       set owner to current user

Without arguments it prints a list of mounted images.
EOF
	exit 1
}

# Without arguments: print mounted images
if [ $# -eq 0 ]; then
	for file in /tmp/nbd*.mount; do
		nbd=`basename "$file" .mount`
		[ "$nbd" = "nbd*" ] && exit 0
		image=
		while read line; do
			if [ -z "$image" ]; then
				image="$line"
			else
				mdir="$line"
				echo "$nbd: $image -> $mdir"
				break
			fi
		done < "$file"
	done
	exit 0
fi

# parse command line
getopt=`getopt -n "$prog" -s sh p:rt:u "$@"` || usage ""
eval set -- "$getopt"

partition=1
read_only=
fstype=
set_uid=
while [ $# -ge 1 ]; do
	case "$1" in
	    -p)	partition="$2"; shift
		echo $partition | grep -q -x "[0-9][0-9]*"
		[ $? -ne 0 ] && error "partition number must be numeric"
		;;
	    -r)	read_only=1 ;;
	    -t)	fstype="$2"; shift ;;
	    -u)	set_uid=1 ;;
	    --)	shift; break ;;
	esac
	shift
done
[ $# -ne 2 ] && usage "wrong number of arguments"
image="$1"
mdir="$2"
full_image=`readlink -f "$image"`
full_mdir=`readlink -f "$mdir"`

# check file types
[ -e "$image" ] || error "$image: no such file"
[ -f "$image" ] || error "$image must be a regular file"
[ -e "$mdir" ] || error "$mdir: no such directory"
[ -d "$mdir" ] || error "$mdir must be a directory"
img_fmt=`qemu-img info "$image" | sed -n 's/^file format: \(.*\)/\1/p'`
[ -n "$img_fmt" ] || error "$image has unknown format"

# load kernel module, check if sudo works
$SUDO modprobe nbd || exit $?

# load FAT filesystem module
$SUDO modprobe vfat 2> /dev/null

# lock
(
	flock -w 5 9 || error "Can't get mount lock"
	chmod a+rw /var/lock/qemu-mount.lock 2> /dev/null

	# already in use?
	grep -q -F -x "$full_image" /tmp/nbd*.mount 2> /dev/null &&
		error "$image already mounted"
	grep -q -F -x "$full_mdir" /tmp/nbd*.mount 2> /dev/null &&
		error "$mdir already in use"

	# find free nbd device
	nbd_size=1
	for nbd in /sys/class/block/nbd*; do
		nbd_size=`cat ${nbd}/size`
		[ $nbd_size -gt 0 ] || break
	done
	[ $nbd_size -gt 0 ]  && error "no free nbd devices"
	nbd=`basename $nbd`

	# reserve nbd device
	echo "${full_image}\n${full_mdir}" > "/tmp/${nbd}.mount" || exit $?

	# qemu-nbd
	opt_part=
	[ $partition -gt 0 ] && opt_part="-P $partition"
	$SUDO qemu-nbd -c "/dev/$nbd" -f "$img_fmt" $opt_part "$full_image"
	ret=$?
	if [ $ret -ne 0 ]; then
		rm -f "/tmp/${nbd}.mount"
		exit $ret
	fi

	# mount
	options=
	[ -n "$read_only" ] && options="$options,ro"
	[ -n "$set_uid" ] && options="$options,uid=`id -u`,gid=`id -g`"
	[ -n "$options" ] && options="-o ${options#,}"
	[ -n "$fstype" ] && options="-t $fstype ${options#,}"
	$SUDO mount $options "/dev/$nbd" "$full_mdir"
	ret=$?
	if [ $ret -ne 0 ]; then
		$SUDO qemu-nbd -d "/dev/$nbd" > /dev/null 2>&1
		rm -f "/tmp/${nbd}.mount"
	fi
	exit $ret
) 9>> /var/lock/qemu-mount.lock